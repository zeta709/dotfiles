# vim:filetype=zsh

zmodload zsh/stat

my_git_info() {
	## NOTE
	## $ git symbolic-ref [--short] HEAD
	##   - no result if HEAD is detached
	## $ git rev-parse --abbrev-ref HEAD
	##   - wrong result if HEAD is detached: result is "HEAD"
	## $ git rev-parse [--short] HEAD
	##   - result is always SHA1
	## $ git branch
	##   - no result if the repo has no commit
	local MY_GIT_DIR_NEW="$(git rev-parse --absolute-git-dir 2>/dev/null)"
	if [[ -n "$MY_GIT_DIR_NEW" ]]; then
		local STAT
		zstat -H STAT -F "%s" "$MY_GIT_DIR_NEW/HEAD"
		local MY_GIT_TIMESTAMP_NEW="${STAT[mtime]}"
		if [[ -z "$MY_GIT_DIR" ]] || [[ "$MY_GIT_DIR" != "$MY_GIT_DIR_NEW" ]] \
			|| [[ -z "$MY_GIT_TIMESTAMP" ]] || [[ "$MY_GIT_TIMESTAMP" -lt "$MY_GIT_TIMESTAMP_NEW" ]]; then
			MY_GIT_DIR="$MY_GIT_DIR_NEW"
			local MY_GIT_SYMREF="$(git symbolic-ref --short HEAD 2>/dev/null)"
			if [[ -n "$MY_GIT_SYMREF" ]]; then
				MY_GIT_INFO="%F{cyan}($MY_GIT_SYMREF)%f "
			else
				local MY_GIT_DETACHED="$(git branch 2>/dev/null | grep "^\*" | sed -E -e 's/\(HEAD detached (at|from) (.*)\)/\2/;s/\* //')"
				local MY_GIT_SHA1="$(git rev-parse --short --verify -q HEAD)"
				local MY_GIT_DETACHED_SHA1="$(git rev-parse --short --verify -q "${MY_GIT_DETACHED}^{commit}")"
				if [[ -n "$MY_GIT_DETACHED_SHA1" ]] && [[ "$MY_GIT_DETACHED_SHA1" = "$MY_GIT_SHA1" ]]; then
					MY_GIT_INFO="%F{cyan}(%F{magenta}$MY_GIT_DETACHED%F{cyan})%f "
				else
					MY_GIT_INFO="%F{cyan}(%F{magenta}$MY_GIT_SHA1%F{cyan})%f "
				fi
			fi
			MY_GIT_TIMESTAMP="$MY_GIT_TIMESTAMP_NEW"
		fi
	else
		MY_GIT_DIR=""
		MY_GIT_INFO=""
		MY_GIT_TIMESTAMP=""
	fi
}

my_git_info "$@"
